generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Users {
    id            String   @id
    name          String
    email         String
    emailVerified Boolean  @default(false)
    image         String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    sessions   Sessions[]
    accounts   Accounts[]
    tasks      Task[]
    activities UserActivity[]

    @@unique([email])
    @@map("users")
}

model Sessions {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("sessions")
}

model Accounts {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@map("accounts")
}

model Verifications {
    id         String   @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@map("verifications")
}

model Task {
    id          String       @id @default(cuid())
    title       String
    description String?
    status      TaskStatus   @default(TODO)
    priority    TaskPriority @default(MEDIUM)
    expiresAt   DateTime
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    createdById String
    createdBy   Users  @relation(fields: [createdById], references: [id])

    @@map("tasks")
}

model UserActivity {
    id        String   @id @default(cuid())
    action    String
    metadata  Json?
    createdAt DateTime @default(now())

    userId String
    user   Users  @relation(fields: [userId], references: [id])

    @@map("user_activities")
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
}

enum TaskPriority {
    LOW
    MEDIUM
    HIGH
}
